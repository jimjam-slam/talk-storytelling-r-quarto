---
format:
  revealjs: 
    theme: [default, style/style.scss]
    highlight-style: github
    width: 1400
    fig-width: 10
---

## Telling stories with data {.hleft .center style="font-size: 150%;"}

James Goldie

# Hi! {#section-aqua}

## {.center}

Climate researcher

↓

Data journalist

# Storytelling fundamentals {#section-sunset}

## Audience, medium and message {.center}

## Audience {.center}

Do they have **specialist training?** (In _your_ field, or another?)

What are their **wants and worries?**

## Medium {.center}

:::: {.columns}
::: {.column width="47.5%"}
![Credit: [MCCCRH](https://monash.edu/mcccrh)](assets/mcccrh-obs.jpg){alt="Map of South Australia, with the long term warming trends of several locations labelled"}
:::
::: {.column width="5%"}
vs.
:::
::: {.column width="47.5%"}
![Credit: [Abhijith S Nair/Unsplash](https://unsplash.com/photos/woman-reading-newspaper-AvKsX5ZOQnA)](assets/newspaper.jpg){alt="Woman reading broadsheet newspaper"}
:::
::::

## Medium {.center}

Where will people encounter your work?

How long will they have to consider it?

Did they seek it out?

## Message {.center}

## What will your readers see first? {.center}

This is called **visual hierarchy**.

\

What did you see first on this slide? What did you see second?

Why?

## {.center}

When all of the elements on your plot look the same, it's really hard for people to decide what to focus on. Without that focus, it's difficult for your plot to lead to a conclusion. Instead, you want to vary your plot elements, drawing attention to the most important things first. There are lots of ways to do this: bolding text, making it bigger, using colours, and taking advantage of natural reading direction can all help to establish visual hierarchy.

## {.center}

When all of the elements on your plot **look the same**, it's **really hard for people** to decide what to focus on.

\

Without that focus, it's difficult for your plot to lead to a conclusion.

\

Instead, you want to **vary your plot elements**, drawing attention to the **most important things** first.

## {.center}

There are lots of ways to do this:

::::{.columns .small}
:::{.column width="30%"}
**bolding text**  
[**making it bigger**]{style="font-size:125%"}<br>
:::
:::{.column width="30%"}
[**using striking colours...**]{style="color: #dd0033"}<br>
[... or softer colours]{style="color: #bbbbbb"}
:::

:::{.column width="30%"}
**taking advantage of natural reading direction** 
:::
::::

These techniques can all **help establish visual hierarchy.**

# Using Quarto for storytelling {#section-moss}

## What is Quarto?

::: {.columns}
::: {.column}
![The source text of a Quarto document](assets/quarto-doc-source.png){alt="The source text of a Quarto document"}
:::
::: {.column}
![The visual editor's view of a Quarto document](assets/quarto-doc-visual.png){alt="The visual editor's view of a Quarto document"}
:::
:::

## Example 1

Your data is **electricity demand** and **temperature** at **3 inner Melbourne sites**:

[**github.com/jimjam-slam/talk-storytelling-r-quarto/\
blob/main/data/power-temperature-threesites.csv**](https://github.com/jimjam-slam/talk-storytelling-r-quarto/blob/main/data/power-temperature-threesites.csv)

\

:::{style="font-size: 48%;"}
```{ojs}
powerTemp = FileAttachment("data/power-temperature-threesites.csv").csv({ typed: true })

Inputs.table(powerTemp)
```
:::

## A basic chart

```{r}
#| library: slides-setup
library(tidyverse)
library(here)
power_temp <- read_csv(here("data", "power-temperature-threesites.csv"))
```

:::{style="font-size: 85%;"}
```{r}
#| label: basic-chart
#| id: basic-chart
#| echo: true
#| output-location: column

ggplot(power_temp) +
  aes(x = tmax, y = demand, colour = working) +
  geom_point(size = 2) +
  facet_wrap(vars(name)) +
  labs(
    x = "2m air temperature [°C]",
    y = "Electricity demand [MW]",
    title = "Electricity and temperature")
```
:::

What stories could we tell with this data?

What improvements could we make?

## Use Quarto to explore this data

:::: {.columns}
::: {.column}

##### R script

````{.r}
library(tidyverse)

ggplot(data) +
  aes() +
  # ...
````
:::
::: {.column}

##### R code chunk in Quarto doc

````
---
title: "Power and temperature"
---

Let's look at this data!

```{{r}}
library(tidyverse)

ggplot(data) +
  aes() +
  # ...
```
````

:::
::::

# Scrollytelling with Closeread {#section-indigo}

## What's scrollytelling?

Scrollytelling involves **graphics that stick** to the screen and and **change as the user scrolls**.

::: {.columns .small}
::: {.column}
![ABC scrollytelling story on fake AI imagery](assets/scrollytelling-abc-480p.mov){alt="Video of a scrollytelling story by the ABC on fake AI imagery" autoplay="true" loop="true"}
:::
::: {.column}
![New York Times scrollytelling story on \"Shah Jahan on a terrace, holding a pendant set with his portrait\" by Chitarman](assets/scrollytelling-nyt-480p.mov){alt="Video of a scrollytelling story by the New York Times on \"Shah Jahan on a terrace, holding a pendant set with his portrait\" by Chitarman" autoplay="true" loop="true"}
:::
:::

## Closeread: scrollytelling with Quarto {.center}

[**Closeread**](https://closeread.dev) is a Quarto extension developed by Andrew Bray  
and James Goldie (me!)

[(We named it after a [**New York Times series**](https://www.nytimes.com/interactive/2021/arts/close-read.html) — the piece in the last slide was from this series!)]{.small .deemph}

Closeread lets you turn a regular Quarto doc into a scrollytelling doc

## How Closeread works {.center}

\

:::: {.columns .small}
::: {.column width="47.5%"}
##### Step 1

A Quarto extension is like an R package — it extends Quarto's abilities.

Install Closeread in the RStudio Terminal by running:

```bash
quarto add qmd-lab/closeread
```

\

##### Step 2

At the top of your Quarto doc, change  
`format: html` → `format: closeread-html`
:::
::: {.column width="5%"}
:::
::: {.column width="47.5%"}
##### Step 3
Tell Quarto where the scrollytelling starts and stops:

\

````
:::{.cr-section}

(scrollytelling stuff goes here!)

:::
````

:::
::::

## How Closeread works {.center}

Closeread has two components: **stickies** and **triggers**.

\

::: {.columns .small}
::: {.column}

##### Stickies

Things you want to stick on the screen. Give them an ID starting with `#cr-`.

````
:::{#cr-myplot}

```{{r}}
ggplot(mydata) +
 aes(x = x, y = y) +
 geom_point()
```

:::
````

:::
::: {.column}

##### Triggers

These make the stickies appear. They work like citations: use the ID of the sticky with an `@`:

````
When this text scrolls past, my great figure will appear! @cr-myplot
````

:::
:::

## How can scrollytelling help my communication? {.hleft}

::: {.columns .small}
::: {.column width="30%"}
Here's a Closeread example where we **build a plot up** one layer at a time:

[**closeread.dev/\
gallery/demos/\
build-up-plots/**](https://closeread.dev/gallery/demos/build-up-plots/)

\

How can we use this technique with our electricity and temperature data?
:::
::: {.column width="5%"}
:::
::: {.column width="65%"}

```{=html}
<iframe
  src="https://closeread.dev/gallery/demos/build-up-plots/"
  style="height: 650px; width: 900px; border: 1px solid lightgrey; border-radius: 0.5em;"></iframe>
```

:::
:::

# Wrapup {#section-carbon}

## Use Closeread, win prizes {.center}

\

Andrew Bray (my collaborator on Closeread) and I have teamed up with data science company **Posit** to run the **Closeread Prize**.

\

[**posit.co/blog/closeread-prize-announcement**](https://posit.co/blog/closeread-prize-announcement)

\

Entries close Jan 5th  
[(we just extended the contest!)]{.small .deemph}

## Thanks! Questions? {.center}

{{< iconify fa6-brands:bluesky >}} [**@jamesgoldie.dev**](https://bsky.app/profile/jamesgoldie.dev)

{{< iconify bi:mastodon >}} [**@jimjamslam@aus.social**](https://aus.social/@jimjamslam@aus.social)

{{< iconify bi:linkedin >}} [**linkedin.com/in/jamesgoldie**](https://www.linkedin.com/in/jamesgoldie)
